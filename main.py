# —Ñ–∞–π–ª —Å–æ –≤—Å–µ–π –ª–æ–≥–∏–∫–æ–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å telegram api

from telebot.async_telebot import AsyncTeleBot
from telebot import types
from config import API_TOKEN, PHONE_NUMBER_FORMAT, INTEGER_FORMAT, FLOAT_FORMAT, NAME_FORMAT
import re
import asyncio
import random
import postgre as Postgre
import actions as Action


def get_users_page_keyboard(callback, page_n):
	users_list = Postgre.get_users()
	keyboard = types.InlineKeyboardMarkup()

	for user in users_list[page_n * 10:min((page_n + 1) * 10, len(users_list))]:
		user_id, user_phone, _, _, _ = user
		keyboard.add(
			types.InlineKeyboardButton(
				text = f'{user_id}) {user_phone}',
				callback_data = f'{callback},{user_id}'),
			row_width = 1)
	
	navigation_buttons = []
	
	if page_n != 0:
		navigation_buttons.append(
			types.InlineKeyboardButton(
				text = '‚¨Ö',
				callback_data = f'get_users_page,{page_n - 1},{callback}'))
	if (page_n + 1) * 10 < len(users_list):
		navigation_buttons.append(
			types.InlineKeyboardButton(
				text = '‚û°',
				callback_data = f'get_users_page,{page_n + 1},{callback}'))
	
	if len(navigation_buttons) != 0:
		keyboard.add(*navigation_buttons, row_width = 2)
	
	keyboard.add(
		types.InlineKeyboardButton(
			text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
			callback_data = 'cancel'))

	return keyboard

def get_user_bills_payment_keyboard(user_id):
	bills = Postgre.get_user_unpaid_bills(user_id)
	keyboard = types.InlineKeyboardMarkup()

	for bill in bills:
		creation_date, total = bill
		keyboard.add(
			types.InlineKeyboardButton(
				text = f'–û–ø–ª–∞—Ç–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ—Ç {creation_date} –Ω–∞ —Å—É–º–º—É {total} —Ä—É–±–ª–µ–π',
				callback_data = f'pay_bills,{user_id},{creation_date},{total}'))

	keyboard.add(
		types.InlineKeyboardButton(
			text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
			callback_data = 'cancel'))

	return keyboard

async def remove_inline_reply_markup(call):

	await bot.edit_message_reply_markup(
		call.message.chat.id,
		call.message.message_id,
		reply_markup = None)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = AsyncTeleBot(API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
cancel_keyboard = types.InlineKeyboardMarkup()
cancel_keyboard.add(
	types.InlineKeyboardButton(
		text = '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
		callback_data = 'cancel'))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
async def send_welcome(message):
	if message.text in ('/start', '/help'):
		await bot.send_message(message.chat.id,
			text = '–Ø –±–æ—Ç –ñ–ö "–°—Ç–æ–ª–∏—á–Ω—ã–π". –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:\n' +
					' ‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏\n' +
					' ‚Ä¢ –ü–æ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á—ë—Ç–∞\n' +
					' ‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥\n' +
					' ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏')

	markup = types.ReplyKeyboardMarkup()

	user_id = Postgre.get_user_id_for_chat(message.chat.id)

	# –ï—Å–ª–∏ user_id –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è, –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è 
	if user_id is None:
		phone_send_button = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
		markup.add(phone_send_button)
		await bot.send_message(message.chat.id,
			text = ('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π —Ç–µ–±–µ –Ω–∞–¥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n' +
				'–î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'),
			reply_markup=markup)
		return
	
	# –∞–¥–º–∏–Ω—É –∫—Ä–µ–ø–∏–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
	if Postgre.is_admin(user_id):
		for row in Action.ADMIN_MARKUP:
			markup.add(
				*map(
					lambda index: Action.ADMIN_ACTIONS[index], 
					row), 
				row_width=len(row))

	# –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
	for row in Action.USER_MARKUP:
		markup.add(
			*map(
				lambda index: Action.USER_ACTIONS[index], 
				row), 
			row_width=len(row))
	
	# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–ª –Ω–µ —Å–ø—Ä–∞–≤–∫—É, –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è
	if message.text != '/help':
		await bot.send_message(message.chat.id,
			text = f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!',
			reply_markup = markup)

# –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /logout
@bot.message_handler(commands=['logout'])
async def deauthorize_user(message):
	Postgre.unlink_chat_from_user(message.chat.id)
	await bot.send_message(
		message.chat.id, 
		text=f'–í—ã –±—ã–ª–∏ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!',
		reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['reset'])
async def restart_session(message):
	Postgre.set_chat_state(message.chat.id, '')
	await bot.send_message(
		message.chat.id,
		text = '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏...')
	await send_welcome(message)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@bot.message_handler(content_types=['contact'])
async def authorize_user(message):
	if message.from_user.id == message.contact.user_id:
		phone_numbers_list = tuple(phone_number 
			for _, phone_number, _, _, _ 
			in Postgre.get_users())
		parsed_phone_number = (('' 
				if message.contact.phone_number.startswith('+') 
				else '+') 
			+ message.contact.phone_number)
		if parsed_phone_number not in phone_numbers_list:
			print(f'{message.contact.phone_number} not in DB!')
			await bot.send_message(
				message.chat.id,
				text = '–í–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ... üò≠',
				reply_markup = types.ReplyKeyboardRemove())
			return
		Postgre.link_chat_to_user(message.chat.id, parsed_phone_number)
		print(f'Linked {parsed_phone_number}!')
		await bot.send_message(
			message.chat.id,
			text=f'–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–æ–º–µ—Ä—É {parsed_phone_number}.',
			reply_markup=types.ReplyKeyboardRemove())
		await send_welcome(message)
	else:
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
		phone_send_button = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
		markup.add(phone_send_button)
		await bot.send_message(
			message.chat.id,
			text='–≠—Ç–æ –Ω–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
			reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
async def process_message(message):
	user_id = Postgre.get_user_id_for_chat(message.chat.id)
	
	if user_id is None:
		await send_welcome(message)
		return

	state = Postgre.get_chat_state(message.chat.id)

	phone_number_regexp = re.compile(PHONE_NUMBER_FORMAT)
	integer_regexp = re.compile(INTEGER_FORMAT)
	float_regexp = re.compile(FLOAT_FORMAT)
	name_regexp = re.compile(NAME_FORMAT)


	if state is not None and state != '':
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
		if state.startswith('ADD_USER'):
			if state.startswith('ADD_USER_PHONE'):
				if phone_number_regexp.fullmatch(message.text):
					Postgre.set_chat_state(message.chat.id, 'ADD_USER_IS_ADMIN,' + message.text)
					await bot.send_message(
						message.chat.id, 
						text = '–î–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º? [–¥–∞/–Ω–µ—Ç]',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞...')
			if state.startswith('ADD_USER_IS_ADMIN'):
				parsed_phone = state.split(',')[1]

				if message.text.lower() in ('–¥–∞', 'yes', '–¥', 'y'):
					new_user_is_admin = 'true'
				elif message.text.lower() in ('–Ω–µ—Ç', 'no', '–Ω', 'n'):
					new_user_is_admin = 'false'				
				else:
					await bot.send_message(message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥...')
					return

				Postgre.set_chat_state(message.chat.id, ','.join(('ADD_USER_DISCOUNT', parsed_phone, new_user_is_admin)))
				discounts_list = Postgre.get_discounts()
				discounts_list_str = '\n'.join((
					f'{discount_id}) {discount_name}' 
					for discount_id, discount_name 
					in discounts_list))
				await bot.send_message(
					message.chat.id, 
					text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' + discounts_list_str,
					reply_markup = cancel_keyboard)
			if state.startswith('ADD_USER_DISCOUNT'):
				_, parsed_phone, parsed_new_user_is_admin = state.split(',')
				if message.text in (str(discount_id) for discount_id, _ in Postgre.get_discounts()):
					Postgre.add_user(parsed_phone, parsed_new_user_is_admin, message.text)
					await bot.send_message(
						message.chat.id,
						text = f'–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {parsed_phone}, ' +
							f'–ª—å–≥–æ—Ç–æ–π {int(message.text)}, ' +
							('–Ω–µ' if parsed_new_user_is_admin == 'false' else '') + ' —è–≤–ª—è—é—â–∏–π—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
					Postgre.set_chat_state(message.chat.id, '')
				else:
					await bot.send_message(message.chat.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã...')
		if state.startswith('DEL_USER'):
			await bot.send_message(
				message.chat.id,
				text = '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π')
		if state.startswith('UPDATE_USER'):
			if state.startswith('UPDATE_USER_USER_SELECT'):
				await bot.send_message(
					message.chat.id,
					text = '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª—å–≥–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π')
			if state.startswith('UPDATE_USER_TARIFF'):
				if message.text in (str(discount_id) for discount_id, _ in Postgre.get_discounts()):
					user_id = state.split(',')[1]
					Postgre.update_user_tariff(user_id, message.text)
					Postgre.set_chat_state(message.chat.id, '')
					await bot.send_message(
						message.chat.id,
						text = f'–¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {message.text}')
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã...')

		if state.startswith('ADD_DISCOUNT'):
			if state.startswith('ADD_DISCOUNT_DISCOUNT_NAME'):
				if name_regexp.fullmatch(message.text):
					Postgre.set_chat_state(message.chat.id, f'ADD_DISCOUNT_DISCOUNT,{message.text}')

					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª—å–≥–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(
						message.chat.id,
						text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ª—å–≥–æ—Ç—ã:'\
						'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã')
			if state.startswith('ADD_DISCOUNT_DISCOUNT,'):
				discount = message.text.replace(',', '.')
				if float_regexp.fullmatch(discount) and float(discount) < 100:
					Postgre.set_chat_state(message.chat.id, '')
					
					discount = float(discount) / 100
					discount_name = state.split(',')[1]

					Postgre.add_discount(discount, discount_name)
					await bot.send_message(
						message.chat.id,
						text = f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª—å–≥–æ—Ç–∞ "{discount_name}" –≤ —Ä–∞–∑–º–µ—Ä–µ {message.text}%"')
				else:
					await bot.send_message(message.chat.id, text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ...')
		if state.startswith('DEL_DISCOUNT'):
			if state.startswith('DEL_DISCOUNT_DISCOUNT_ID'):
				if message.text in (str(discount_id) for discount_id, _ in Postgre.get_discounts()):
					Postgre.set_chat_state(message.chat.id, '')

					Postgre.delete_discount(message.text)
					await bot.send_message(
						message.chat.id,
						text = f'–õ—å–≥–æ—Ç–∞ –Ω–æ–º–µ—Ä {message.text} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã...')
		if state.startswith('UPDATE_DISCOUNT'):
			if state.startswith('UPDATE_DISCOUNT_DISCOUNT_ID'):
				if message.text in (str(discount_id) for discount_id, _ in Postgre.get_discounts()):
					Postgre.set_chat_state(message.chat.id, f'UPDATE_DISCOUNT_DISCOUNT_NAME,{message.text}')

					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—å–≥–æ—Ç—ã:',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã...')
			if state.startswith('UPDATE_DISCOUNT_DISCOUNT_NAME'):
				discount_id = state.split(',')[1]
				if name_regexp.fullmatch(message.text):
					Postgre.set_chat_state(message.chat.id, f'UPDATE_DISCOUNT_DISCOUNT,{discount_id},{message.text}')

					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ª—å–≥–æ—Ç—ã:',
						reply_markup = cancel_keyboard)
			if state.startswith('UPDATE_DISCOUNT_DISCOUNT,'):
				discount = message.text.replace(',', '.')
				if float_regexp.fullmatch(discount) and float(discount) < 100:
					_, discount_id, discount_name = state.split(',')
					discount = float(discount) / 100

					Postgre.set_chat_state(message.chat.id, '')
					Postgre.update_discount(discount_id, discount, discount_name)

					await bot.send_message(
						message.chat.id,
						text = f'–õ—å–≥–æ—Ç–µ –Ω–æ–º–µ—Ä {discount_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è "{discount_name}" –∏ —Ä–∞–∑–º–µ—Ä {message.text}%')
				else:
					await bot.send_message(message.chat.id, text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ...')

		if state.startswith('ADD_TARIFF'):
			if state.startswith('ADD_TARIFF_NAME'):
				tariff_name = message.text
				if name_regexp.fullmatch(tariff_name):
					Postgre.set_chat_state(message.chat.id, f'ADD_TARIFF_COST,{tariff_name}')
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(
						message.chat.id, 
						text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ç–∞—Ä–∏—Ñ–∞: '\
						'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã')
			if state.startswith('ADD_TARIFF_COST'):
				tariff_cost = message.text.replace(',', '.')
				tariff_name = state.split(',')[1]
				if float_regexp.fullmatch(tariff_cost) and float(tariff_cost) >= 0.01:
					Postgre.set_chat_state(message.chat.id, '')
					Postgre.add_tariff(tariff_name, tariff_cost)
					await bot.send_message(
						message.chat.id,
						text = f'–¢–∞—Ä–∏—Ñ "{tariff_name}" —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {tariff_cost} —Ä—É–±./—É.–µ –¥–æ–±–∞–≤–ª–µ–Ω')
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞...')
		if state.startswith('DEL_TARIFF'):
			if state.startswith('DEL_TARIFF_ID'):
				if message.text in (str(tariff_id) for tariff_id, _, _, _ in Postgre.get_tariffs()):
					Postgre.set_chat_state(message.chat.id, '')
					Postgre.delete_tariff(message.text)
					await bot.send_message(
						message.chat.id,
						text = f'–¢–∞—Ä–∏—Ñ —Å ID {message.text} –±—ã–ª —É–¥–∞–ª—ë–Ω')
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞—Ä–∏—Ñ–∞...')
		if state.startswith('UPDATE_TARIFF'):
			if state.startswith('UPDATE_TARIFF_TARIFF_ID'):
				if message.text in (str(tariff_id) for tariff_id, _, _, _ in Postgre.get_tariffs()):
					Postgre.set_chat_state(message.chat.id, f'UPDATE_TARIFF_TARIFF_NAME,{message.text}')
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ -1, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –º–µ–Ω—è—Ç—å',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–∞—Ä–∏—Ñ–∞...')
			if state.startswith('UPDATE_TARIFF_TARIFF_NAME'):
				if name_regexp.fullmatch(message.text):
					tariff_id = state.split(',')[1]
					Postgre.set_chat_state(message.chat.id, f'UPDATE_TARIFF_TARIFF_COST,{tariff_id},{message.text}')
					await bot.send_message(
						message.chat.id, 
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(
						message.chat.id, 
						text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ç–∞—Ä–∏—Ñ–∞: '\
						'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã')
			if state.startswith('UPDATE_TARIFF_TARIFF_COST'):
				tariff_cost = message.text.replace(',', '.')
				if float_regexp.fullmatch(message.text) and float(tariff_cost) >= 0.01:
					_, tariff_id, tariff_name = state.split(',')
					Postgre.set_chat_state(message.chat.id, '')
					Postgre.update_tariff(tariff_id, tariff_cost, tariff_name)
					await bot.send_message(
						message.chat.id,
						text = f'–ò–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ —Å ID {tariff_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã')

		if state.startswith('ADD_DEVICE'):
			if state.startswith('ADD_DEVICE_ID'):
				if integer_regexp.fullmatch(message.text) and int(message.text) > 10000:
					device_id = int(message.text)
					if device_id in Postgre.get_devices():
						await bot.send_message(message.chat.id, text = '–î–∞–Ω–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
					else:
						await bot.send_message(
							message.chat.id,
							text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–ª–∞–¥–µ—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º',
							reply_markup = get_users_page_keyboard(f'add_device_to_user,{device_id}', 0))
						Postgre.set_chat_state(message.chat.id, 'ADD_DEVICE_TO_USER')
				else:
					await bot.send_message(
						message.chat.id,
						text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞...')
			if state.startswith('ADD_DEVICE_TO_USER'):
				await bot.send_message(
					message.chat.id,
					text = '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π')
			if state.startswith('ADD_DEVICE_SET_TARIFF'):
				device_id = state.split(',')[1]
				if message.text in (str(tariff_id) 
					for tariff_id, _, _, _ 
					in Postgre.get_tariffs()):
					Postgre.add_device_tariff(device_id, message.text)
					await bot.send_message(
						message.chat.id,
						text = f'–î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {device_id} –∏ —Ç–∞—Ä–∏—Ñ–æ–º {message.text}')
					Postgre.set_chat_state(message.chat.id, '')
		if state.startswith('DEL_DEVICE'):
			if state.startswith('DEL_DEVICE_USER_ID'):
				await bot.send_message(
					message.chat.id, 
					text = '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π')
			if state.startswith('DEL_DEVICE_DEVICE_ID'):
				user_id = state.split(',')[1]
				if message.text in (str(device_id) for device_id in Postgre.get_user_devices(user_id)):
					Postgre.delete_device(message.text)
					Postgre.set_chat_state(message.chat.id, '')
					await bot.send_message(
						message.chat.id,
						text = f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID {message.text} —É–¥–∞–ª–µ–Ω–æ!')
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...')
		if state.startswith('ADD_DEVICE_TARIFF'):
			if state.startswith('ADD_DEVICE_TARIFF_USER_ID'):
				await bot.send_message(
					message.chat.id,
					text = '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π')
			if state.startswith('ADD_DEVICE_TARIFF_DEVICE_ID'):
				user_id = state.split(',')[1]
				if message.text in (str(device_id) for device_id in Postgre.get_user_devices(user_id)):
					Postgre.set_chat_state(message.chat.id, f'ADD_DEVICE_TARIFF_SET_TARIFF,{message.text}')
					tariffs_list_str = '\n'.join(
						f'{tariff_id}) {tariff_name} - {tariff_cost} —Ä—É–±./—É.–µ.'
						for tariff_id, tariff_name, _, tariff_cost
						in Postgre.get_tariffs())
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É:\n' + tariffs_list_str,
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...')
			if state.startswith('ADD_DEVICE_TARIFF_SET_TARIFF'):
				device_id = state.split(',')[1]
				if message.text in (str(tariff_id)
					for tariff_id, _, _, _
					in Postgre.get_tariffs()):
					if message.text in (str(tariff_id)
						for tariff_id, _
						in Postgre.get_device_tariffs(device_id)):
						await bot.send_message(
							message.chat.id,
							text = '–≠—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ' \
							'–≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞')
					else:
						Postgre.add_device_tariff(device_id, message.text)
						Postgre.set_chat_state(message.chat.id, '')
						await bot.send_message(
							message.chat.id,
							text = f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Å ID {device_id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ {message.text}')
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞')

		if state.startswith('UPDATE_MEASUREMENTS'):
			if state.startswith('UPDATE_MEASUREMENTS_DEVICE_ID'):
				if message.text in (str(device_id) 
					for device_id 
					in Postgre.get_user_devices(user_id)):
					
					Postgre.set_chat_state(message.chat.id, f'UPDATE_MEASUREMENTS_TARIFF_ID,{message.text}')
					device_tariffs_list = '\n'.join(
						f'{tariff_id}) {tariff_name}' 
							for tariff_id, tariff_name 
							in Postgre.get_device_tariffs(message.text))
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è:\n' + device_tariffs_list,
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...')
			if state.startswith('UPDATE_MEASUREMENTS_TARIFF_ID'):
				device_id = state.split(',')[1]
				if message.text in (str(tariff_id)
					for tariff_id, _ 
					in Postgre.get_device_tariffs(device_id)):
					
					Postgre.set_chat_state(message.chat.id, f'UPDATE_MEASUREMENTS_MEASUREMENT,{device_id},{message.text}')
					await bot.send_message(
						message.chat.id,
						text = f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ "{Postgre.get_device_name(device_id)}" –∏ —Ç–∞—Ä–∏—Ñ–∞ {message.text}',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(
						message.chat.id,
						text = '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞...')
			if state.startswith('UPDATE_MEASUREMENTS_MEASUREMENT'):
				_, device_id, tariff_id = state.split(',')
				measurement = message.text.replace(',', '.')

				if float_regexp.fullmatch(measurement):
					if float(measurement) >= Postgre.get_last_measurement(device_id, tariff_id)[0]:
						Postgre.set_chat_state(message.chat.id, '')
						Postgre.send_measurement(device_id, tariff_id, measurement)
						await bot.send_message(
							message.chat.id,
							text = f'–ü–æ–¥–∞–Ω—ã –ø–æ–∫–∞–∑–∞–Ω–∏—è {measurement} —É.–µ. '\
								f'–¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ "{Postgre.get_device_name(device_id)}"'\
								f' –∏ —Ç–∞—Ä–∏—Ñ–∞ {tariff_id}')
					else:
						await bot.send_message(message.chat.id, text = '–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö')
				else:
					await bot.send_message(message.chat.id, text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ...')
		if state.startswith('EDIT_DEVICE'):
			if state.startswith('EDIT_DEVICE_DEVICE_ID'):
				if message.text in (str(device_id) 
					for device_id
					in Postgre.get_user_devices(user_id)):

					Postgre.set_chat_state(message.chat.id, f'EDIT_DEVICE_DEVICE_NAME,{message.text}')
					await bot.send_message(
						message.chat.id,
						text = f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:',
						reply_markup = cancel_keyboard)
				else:
					await bot.send_message(message.chat.id, text = '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...')
			if state.startswith('EDIT_DEVICE_DEVICE_NAME'):
				if name_regexp.fullmatch(message.text):
					device_id = state.split(',')[1]
					Postgre.update_device_name(device_id, message.text)
					Postgre.set_chat_state(message.chat.id, '')
					await bot.send_message(
						message.chat.id,
						text = f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Å ID {device_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è "{message.text}"')
				else:
					await bot.send_message(
						message.chat.id,
						text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: '\
							'–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã')


	else:
		if (Postgre.is_admin(user_id) 
			and message.text in Action.ADMIN_ACTIONS):
			
			print(f'ADMIN ACTION --- chat_id={message.chat.id} action="{message.text}"')
			match message.text:
				case Action.ADD_USER:
					Postgre.set_chat_state(message.chat.id, 'ADD_USER_PHONE')
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "+79123456789"',
						reply_markup = cancel_keyboard)
				case Action.DEL_USER:
					Postgre.set_chat_state(message.chat.id, 'DEL_USER')
					await bot.send_message(
						message.chat.id,
						text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
						reply_markup = get_users_page_keyboard('delete_user', 0))
				case Action.UPDATE_USER:
					Postgre.set_chat_state(message.chat.id, 'UPDATE_USER_USER_SELECT')
					await bot.send_message(
						message.chat.id,
						text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª—å–≥–æ—Ç—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
						reply_markup = get_users_page_keyboard('update_user_tariff', 0))

				case Action.ADD_DISCOUNT:
					Postgre.set_chat_state(message.chat.id, 'ADD_DISCOUNT_DISCOUNT_NAME')
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª—å–≥–æ—Ç—ã:',
						reply_markup = cancel_keyboard)
				case Action.DEL_DISCOUNT:
					Postgre.set_chat_state(message.chat.id, 'DEL_DISCOUNT_DISCOUNT_ID')

					discounts_list = Postgre.get_discounts()
					discounts_list_str = '\n'.join((
						f'{discount_id}) {discount_name}' 
						for discount_id, discount_name 
						in discounts_list))
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n' + discounts_list_str,
						reply_markup = cancel_keyboard)
				case Action.UPDATE_DISCOUNT:
					Postgre.set_chat_state(message.chat.id, 'UPDATE_DISCOUNT_DISCOUNT_ID')

					discounts_list = Postgre.get_discounts()
					discounts_list_str = '\n'.join((f'{discount_id}) {discount_name}' for discount_id, discount_name in discounts_list))
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª—å–≥–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n' + discounts_list_str,
						reply_markup = cancel_keyboard)

				case Action.ADD_TARIFF:
					Postgre.set_chat_state(message.chat.id, 'ADD_TARIFF_NAME')
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
						reply_markup = cancel_keyboard)
				case Action.DEL_TARIFF:
					Postgre.set_chat_state(message.chat.id, 'DEL_TARIFF_ID')
					tariffs_list_str = '\n'.join(
						f'{tariff_id}) {tariff_name} - {tariff_cost} —Ä—É–±./—É.–µ.'
						for tariff_id, tariff_name, _, tariff_cost
						in Postgre.get_tariffs())
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n' + tariffs_list_str,
						reply_markup = cancel_keyboard)
				case Action.UPDATE_TARIFF:
					Postgre.set_chat_state(message.chat.id, 'UPDATE_TARIFF_TARIFF_ID')
					tariffs_list_str = '\n'.join(
						f'{tariff_id}) {tariff_name} - {tariff_cost} —Ä—É–±./—É.–µ.'
						for tariff_id, tariff_name, _, tariff_cost
						in Postgre.get_tariffs())
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞—Ä–∏—Ñ–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n' + tariffs_list_str,
						reply_markup = cancel_keyboard)

				case Action.ADD_DEVICE:
					await bot.send_message(
						message.chat.id,
						text = '–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä (ID) –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (5-7 —Ü–∏—Ñ—Ä):',
						reply_markup = cancel_keyboard)
					Postgre.set_chat_state(message.chat.id, 'ADD_DEVICE_ID')
				case Action.DEL_DEVICE:
					await bot.send_message(
						message.chat.id,
						text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
						reply_markup = get_users_page_keyboard('delete_device', 0))
					Postgre.set_chat_state(message.chat.id, 'DEL_DEVICE_USER_ID')
				case Action.ADD_DEVICE_TARIFF:
					Postgre.set_chat_state(message.chat.id, 'ADD_DEVICE_TARIFF_USER_ID')
					await bot.send_message(
						message.chat.id,
						text = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ',
						reply_markup = get_users_page_keyboard('add_device_tariff', 0))

 		
		elif message.text in Action.USER_ACTIONS:
			
			print(f'USER ACTION --- chat_id={message.chat.id} action="{message.text}"')
			match message.text:
				case Action.GET_DISCOUNT_TYPE:
					discount, discount_name = Postgre.get_user_discount(user_id)
					await bot.send_message(
						message.chat.id, 
						text = f'–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª—å–≥–æ—Ç–∞ "{discount_name}" —Ä–∞–∑–º–µ—Ä–æ–º {discount*100}%')
				case Action.GET_TARIFFS:
					tariffs_list_str = '\n'.join(
						f'{tariff_id}) {tariff_name} - {tariff_cost} —Ä—É–±./—É.–µ'
						for tariff_id, tariff_name, _, tariff_cost
						in Postgre.get_tariffs())
					await bot.send_message(
						message.chat.id, 
						text = '–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n' + tariffs_list_str)
				case Action.UPDATE_MEASUREMENTS:
					Postgre.set_chat_state(message.chat.id, f'UPDATE_MEASUREMENTS_DEVICE_ID')
					devices_list = '\n'.join(
						f'{device_id}) {Postgre.get_device_name(device_id)}' 
							for device_id 
							in Postgre.get_user_devices(user_id))
					await bot.send_message(
						message.chat.id, 
						text = '–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è:\n' + devices_list,
						reply_markup = cancel_keyboard)

				case Action.GET_BILL:
					last_bill_date = Postgre.get_user_last_bill_date(user_id)
					devices_with_old_measurements = []
					for device_id in Postgre.get_user_devices(user_id):
						for tariff_id, tariff_name  in Postgre.get_device_tariffs(device_id):
							if Postgre.get_last_measurement(device_id, tariff_id)[1] <= last_bill_date:
								devices_with_old_measurements.append(f'{device_id}) –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "{Postgre.get_device_name(device_id)}" —Ç–∞—Ä–∏—Ñ "{tariff_name}"')
					if len(devices_with_old_measurements) > 0:
						await bot.send_message(
							message.chat.id,
							text = ('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é, –ø–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n' 
								+ '\n'.join(devices_with_old_measurements)))
					else:
						Postgre.create_bill(user_id)
						last_bill = Postgre.get_user_unpaid_bills(user_id)[-1]
						creation_date, total = last_bill
						payment_keyboard = types.InlineKeyboardMarkup()
						payment_keyboard.add(
							types.InlineKeyboardButton(
								text = f'–û–ø–ª–∞—Ç–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ—Ç {creation_date} –Ω–∞ {total} —Ä—É–±–ª–µ–π',
								callback_data = f'pay_bill,{user_id},{creation_date},{total}'))

						await bot.send_message(
							message.chat.id,
							text = '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞.\n' \
								f'–°—É–º–º–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: {total} —Ä—É–±.',
							reply_markup = payment_keyboard)
				case Action.CHECK_DEBT:
					balance = Postgre.get_user_balance(user_id)

					if balance >= 0:
						await bot.send_message(
							message.chat.id,
							text = '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏')
					else:
						await bot.send_message(
							message.chat.id,
							text = f'–£ –≤–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ —Å—É–º–º—É {-balance} —Ä—É–±–ª–µ–π.\n'\
								'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Ö',
							reply_markup = get_user_bills_payment_keyboard(user_id))

				case Action.EDIT_DEVICES:
					Postgre.set_chat_state(message.chat.id, f'EDIT_DEVICE_DEVICE_ID')
					devices_list = '\n'.join(
						f'{device_id}) {Postgre.get_device_name(device_id)}' 
							for device_id 
							in Postgre.get_user_devices(user_id))
					await bot.send_message(
						message.chat.id, 
						text = '–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–º—è:\n' + devices_list,
						reply_markup = cancel_keyboard)
					
		else:
			await send_error(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
async def cancel_operation(call):
	Postgre.set_chat_state(call.message.chat.id, '')
	await remove_inline_reply_markup(call)
	await bot.send_message(
		call.message.chat.id,
		text = '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'get_users_page')
async def get_new_users_page(call):
	page_n = int(call.data.split(',')[1])
	callback = ','.join(call.data.split(',')[2:])
	await bot.edit_message_reply_markup(
		call.message.chat.id,
		call.message.message_id,
		reply_markup = get_users_page_keyboard(callback, page_n))

# –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'delete_user')
async def delete_user(call):
	user_id = call.data.split(',')[1]
	await remove_inline_reply_markup(call)
	choice_keyboard = types.InlineKeyboardMarkup()
	choice_keyboard.add(
		types.InlineKeyboardButton(
			text = '‚úî –î–∞',
			callback_data = f'delete_user_confirmed,{user_id}'),
		types.InlineKeyboardButton(
			text = '‚ùå –ù–µ—Ç',
			callback_data = 'cancel'),
		row_width = 2)
	await bot.send_message(
		call.message.chat.id,
		text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?',
		reply_markup = choice_keyboard)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –£–î–ê–õ–Ø–ï–ú!
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'delete_user_confirmed')
async def delete_user_confirmed(call):
	await remove_inline_reply_markup(call)
	Postgre.set_chat_state(call.message.chat.id, '')
	user_id = int(call.data.split(',')[1])
	if Postgre.is_admin(user_id) and user_id != Postgre.get_user_id_for_chat(call.message.chat.id):
		await bot.send_message(
			call.message.chat.id,
			text = f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!')
	else:
		Postgre.delete_user(user_id)
		await bot.send_message(
			call.message.chat.id,
			text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª—ë–Ω')

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'update_user_tariff')
async def update_user_tariff(call):
	await remove_inline_reply_markup(call)

	user_id = call.data.split(',')[1]
	Postgre.set_chat_state(call.message.chat.id, f'UPDATE_USER_TARIFF,{user_id}')

	discounts_list = Postgre.get_discounts()
	discounts_list_str = '\n'.join((f'{discount_id}) {discount_name}' for discount_id, discount_name in discounts_list))

	await bot.send_message(
		call.message.chat.id, 
		text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π –ª—å–≥–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' + discounts_list_str,
		reply_markup = cancel_keyboard)

# –ü—Ä–∏–≤—è–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'add_device_to_user')
async def link_device_to_user(call):
	await remove_inline_reply_markup(call)

	device_id, user_id = call.data.split(',')[1:]

	Postgre.add_device(user_id, device_id)
	Postgre.set_chat_state(call.message.chat.id, f'ADD_DEVICE_SET_TARIFF,{device_id}')

	tariffs_list_str = '\n'.join(
		f'{tariff_id}) {tariff_name} - {tariff_cost} —Ä—É–±./—É.–µ.'
		for tariff_id, tariff_name, _, tariff_cost
		in Postgre.get_tariffs())

	await bot.send_message(
		call.message.chat.id,
		text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n' + tariffs_list_str,
		reply_markup = cancel_keyboard)

# –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'delete_device')
async def delete_device(call):
	await remove_inline_reply_markup(call)

	user_id = call.data.split(',')[1]

	Postgre.set_chat_state(call.message.chat.id, f'DEL_DEVICE_DEVICE_ID,{user_id}')

	devices_list = '\n'.join(map(str, Postgre.get_user_devices(user_id)))
	await bot.send_message(
		call.message.chat.id,
		text = '–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n' + devices_list,
		reply_markup = cancel_keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'add_device_tariff')
async def add_device_tariff(call):
	await remove_inline_reply_markup(call)

	user_id = call.data.split(',')[1]

	Postgre.set_chat_state(call.message.chat.id, f'ADD_DEVICE_TARIFF_DEVICE_ID,{user_id}')

	devices_list = '\n'.join(map(str, Postgre.get_user_devices(user_id)))
	await bot.send_message(
		call.message.chat.id,
		text = '–í–≤–µ–¥–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ:\n' + devices_list,
		reply_markup = cancel_keyboard)

@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'pay_bill')
async def pay_bill(call):
	await remove_inline_reply_markup(call)

	_, user_id, creation_date, total = call.data.split(',')

	Postgre.pay_bill(user_id, creation_date)
	await bot.send_message(
		call.message.chat.id,
		text = f'–û–ø–ª–∞—á–µ–Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç {creation_date} –Ω–∞ —Å—É–º–º—É {total} —Ä—É–±–ª–µ–π')

@bot.callback_query_handler(func=lambda call: call.data.split(',')[0] == 'pay_bills')
async def pay_bills(call):
	_, user_id, creation_date, total = call.data.split(',')

	Postgre.pay_bill(user_id, creation_date)
	await bot.send_message(
		call.message.chat.id,
		text = f'–û–ø–ª–∞—á–µ–Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç {creation_date} –Ω–∞ —Å—É–º–º—É {total} —Ä—É–±–ª–µ–π')

	bills_payment_keyboard = get_user_bills_payment_keyboard(user_id)
	await bot.edit_message_reply_markup(
		call.message.chat.id,
		call.message.message_id,
		reply_markup = bills_payment_keyboard)

@bot.message_handler(func=lambda message: True)
async def send_error(message):
	await bot.send_message(message.chat.id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ...')

if __name__=='__main__':
	asyncio.run(bot.polling())